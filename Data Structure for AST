Data Structure for AST
Weâ€™ll define a Node class to represent the AST structure. This will allow us to create, modify, and evaluate rules dynamically. 
class Node:
    def __init__(self, node_type, value=None, left=None, right=None):
        """
        Initialize a node in the AST.
        
        :param node_type: str, type of the node ("operator" or "operand")
        :param value: optional, value for operand nodes (e.g., threshold for comparison)
        :param left: Node, reference to the left child
        :param right: Node, reference to the right child
        """
        self.type = node_type  # "operator" or "operand"
        self.value = value      # Optional value for operand nodes
        self.left = left        # Reference to left child (Node)
        self.right = right      # Reference to right child (Node)

    def evaluate(self, user_attributes):
        """
        Evaluate the AST against user attributes.
        
        :param user_attributes: dict, user attributes (e.g., age, department, income)
        :return: bool, result of evaluation
        """
        if self.type == "operand":
            # Example comparison: value could be a tuple (attribute, comparison, threshold)
            attribute, comparison, threshold = self.value
            user_value = user_attributes.get(attribute)

            if comparison == "==":
                return user_value == threshold
            elif comparison == ">":
                return user_value > threshold
            elif comparison == "<":
                return user_value < threshold
            # Add other comparisons as needed...

        elif self.type == "operator":
            left_eval = self.left.evaluate(user_attributes) if self.left else False
            right_eval = self.right.evaluate(user_attributes) if self.right else False
            
            if self.value == "AND":
                return left_eval and right_eval
            elif self.value == "OR":
                return left_eval or right_eval
            # Add other operators as needed...

        return False

Example Usage
Constructing Rules: You can dynamically build an AST using the Node class.

# Example rule: (age > 18 AND income > 30000) OR (department == "HR")
age_rule = Node("operand", value=("age", ">", 18))
income_rule = Node("operand", value=("income", ">", 30000))
and_rule = Node("operator", value="AND", left=age_rule, right=income_rule)

department_rule = Node("operand", value=("department", "==", "HR"))
final_rule = Node("operator", value="OR", left=and_rule, right=department_rule)



Evaluating Rules: Pass user attributes to the evaluate method.

user_attributes = {
    "age": 20,
    "income": 40000,
    "department": "IT"
}

eligibility = final_rule.evaluate(user_attributes)
print("User is eligible:", eligibility)  # Output: User is eligible: True
